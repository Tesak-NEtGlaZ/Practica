import sys
from PyQt6.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton, QRadioButton,
    QGridLayout, QHBoxLayout
)
from PyQt6.QtGui import QPalette, QColor
from PyQt6.QtCore import Qt
import os
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from PyQt6.QtWidgets import QFileDialog, QMessageBox

class MortgageCalculator(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        self.setFixedSize(600, 400)
        self.dark_mode = False  # —Ñ–ª–∞–≥ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã

        self.init_ui()
        self.apply_light_theme()

    def init_ui(self):
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.amount_input = QLineEdit()
        self.term_input = QLineEdit()
        self.rate_input = QLineEdit()

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
        self.annuity_radio = QRadioButton("–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π")
        self.diff_radio = QRadioButton("–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")

        # –ü–æ–ª—è –≤—ã–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
        self.monthly_payment = QLineEdit()
        self.total_overpay = QLineEdit()
        self.total_payment = QLineEdit()
        for field in [self.monthly_payment, self.total_overpay, self.total_payment]:
            field.setReadOnly(True)

        # –ö–Ω–æ–ø–∫–∏
        self.calc_btn = QPushButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
        self.pdf_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF")
        self.theme_btn = QPushButton("üåô")  # –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
        self.theme_btn.setFixedSize(30, 30)
        self.theme_btn.clicked.connect(self.toggle_theme)

        self.calc_btn.clicked.connect(self.calculate)
        self.pdf_btn.clicked.connect(self.save_to_pdf)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_bar = QHBoxLayout()
        top_bar.addStretch()
        top_bar.addWidget(self.theme_btn)

        # –°–µ—Ç–∫–∞
        layout = QGridLayout()
        layout.addLayout(top_bar, 0, 0, 1, 4)

        layout.addWidget(QLabel("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞"), 1, 0)
        layout.addWidget(self.amount_input, 1, 1)

        layout.addWidget(QLabel("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)"), 2, 0)
        layout.addWidget(self.term_input, 2, 1)

        layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)"), 3, 0)
        layout.addWidget(self.rate_input, 3, 1)

        layout.addWidget(QLabel("–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞"), 4, 0)
        layout.addWidget(self.annuity_radio, 4, 1)
        layout.addWidget(self.diff_radio, 5, 1)

        layout.addWidget(self.calc_btn, 6, 0)
        layout.addWidget(self.pdf_btn, 6, 1)

        layout.addWidget(QLabel("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂"), 1, 2)
        layout.addWidget(self.monthly_payment, 1, 3)

        layout.addWidget(QLabel("–û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞"), 2, 2)
        layout.addWidget(self.total_overpay, 2, 3)

        layout.addWidget(QLabel("–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç"), 3, 2)
        layout.addWidget(self.total_payment, 3, 3)

        self.setLayout(layout)

    def calculate(self):
        """–†–∞—Å—á—ë—Ç –∏–ø–æ—Ç–µ–∫–∏"""
        try:
            principal = float(self.amount_input.text())
            years = float(self.term_input.text())
            rate = float(self.rate_input.text()) / 100
            months = int(years * 12)

            if self.annuity_radio.isChecked():
                monthly_rate = rate / 12
                payment = principal * (monthly_rate * (1 + monthly_rate) ** months) / \
                          ((1 + monthly_rate) ** months - 1)
                total = payment * months
            elif self.diff_radio.isChecked():
                payments = []
                for m in range(months):
                    principal_part = principal / months
                    interest_part = (principal - principal * m / months) * rate / 12
                    payments.append(principal_part + interest_part)
                total = sum(payments)
                payment = payments[0]
            else:
                self.monthly_payment.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø")
                return

            overpay = total - principal
            self.monthly_payment.setText(f"{payment:,.2f}".replace(',', ' '))
            self.total_overpay.setText(f"{overpay:,.2f}".replace(',', ' '))
            self.total_payment.setText(f"{total:,.2f}".replace(',', ' '))

        except ValueError:
            self.monthly_payment.setText("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
            self.total_overpay.clear()
            self.total_payment.clear()

    def _resource_path(rel_path: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É –∫–∞–∫ –≤ dev, —Ç–∞–∫ –∏ –≤ PyInstaller onefile."""
        base = getattr(sys, "_MEIPASS", os.path.dirname(__file__))
        return os.path.join(base, rel_path)

    def save_to_pdf(self):
        filename, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF", "", "PDF Files (*.pdf)"
        )
        if not filename:
            return
        if not filename.lower().endswith(".pdf"):
            filename += ".pdf"

        # –ù–∞–π—Ç–∏ —à—Ä–∏—Ñ—Ç: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ä—è–¥–æ–º —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (works with PyInstaller),
        # –∑–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
        base = getattr(sys, '_MEIPASS', os.path.dirname(__file__))  # support PyInstaller
        candidates = [
            os.path.join(base, "DejaVuSans.ttf"),
            os.path.join(base, "fonts", "DejaVuSans.ttf"),
            "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",  # linux
            "/usr/local/share/fonts/DejaVuSans.ttf",
            "C:\\Windows\\Fonts\\arial.ttf",  # windows fallback
            "/Library/Fonts/Arial Unicode.ttf",  # mac fallback
        ]

        font_path = None
        for p in candidates:
            if p and os.path.exists(p):
                font_path = p
                break

        if font_path is None:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω TTF-—à—Ä–∏—Ñ—Ç –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã.\n"
                                                 "–ü–æ–º–µ—Å—Ç–∏—Ç–µ DejaVuSans.ttf —Ä—è–¥–æ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤.")
            return

        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è TTF —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥ –∏–º–µ–Ω–µ–º 'DejaVuSans'
            pdfmetrics.registerFont(TTFont("DejaVuSans", font_path))

            c = canvas.Canvas(filename, pagesize=A4)
            width, height = A4

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            c.setFont("DejaVuSans", 16)
            c.drawString(100, height - 50, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ –∏–ø–æ—Ç–µ–∫–∏")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            c.setFont("DejaVuSans", 12)
            y = height - 90
            line_height = 18

            fields = [
                ("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", self.amount_input.text()),
                ("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)", self.term_input.text()),
                ("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)", self.rate_input.text()),
                ("–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞", "–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π" if self.annuity_radio.isChecked() else "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
                ("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂", self.monthly_payment.text()),
                ("–û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞", self.total_overpay.text()),
                ("–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç", self.total_payment.text()),
            ]

            for label, value in fields:
                c.drawString(100, y, f"{label}: {value}")
                y -= line_height
                if y < 50:
                    c.showPage()
                    c.setFont("DejaVuSans", 12)
                    y = height - 50

            c.save()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{filename}")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF:\n{e}")

    def toggle_theme(self):
        if self.dark_mode:
            self.apply_light_theme()
        else:
            self.apply_dark_theme()
        self.dark_mode = not self.dark_mode

    def apply_dark_theme(self):
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.ColorRole.Window, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ColorRole.WindowText, Qt.GlobalColor.white)
        dark_palette.setColor(QPalette.ColorRole.Base, QColor(35, 35, 35))
        dark_palette.setColor(QPalette.ColorRole.AlternateBase, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ColorRole.ToolTipBase, Qt.GlobalColor.white)
        dark_palette.setColor(QPalette.ColorRole.ToolTipText, Qt.GlobalColor.white)
        dark_palette.setColor(QPalette.ColorRole.Text, Qt.GlobalColor.white)
        dark_palette.setColor(QPalette.ColorRole.Button, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ColorRole.ButtonText, Qt.GlobalColor.white)
        dark_palette.setColor(QPalette.ColorRole.BrightText, Qt.GlobalColor.red)

        self.theme_btn.setText("‚òÄÔ∏è")
        QApplication.instance().setPalette(dark_palette)

    def apply_light_theme(self):
        QApplication.instance().setPalette(QApplication.instance().style().standardPalette())
        self.theme_btn.setText("üåô")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MortgageCalculator()
    window.show()
    sys.exit(app.exec())
