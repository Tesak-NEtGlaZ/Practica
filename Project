import sys
from PyQt6.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton, QRadioButton,
    QGridLayout, QHBoxLayout, QFileDialog, QMessageBox
)
from PyQt6.QtGui import QPalette, QColor
from PyQt6.QtCore import Qt
import os
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

class MortgageCalculator(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        self.setFixedSize(600, 400)
        self.dark_mode = False

        self.init_ui()
        self.apply_light_theme()

    def init_ui(self):
        self.amount_input = QLineEdit()
        self.term_input = QLineEdit()
        self.rate_input = QLineEdit()

        self.annuity_radio = QRadioButton("–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π")
        self.diff_radio = QRadioButton("–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
        self.annuity_radio.setChecked(True)

        self.monthly_payment = QLineEdit()
        self.total_overpay = QLineEdit()
        self.total_payment = QLineEdit()
        for field in [self.monthly_payment, self.total_overpay, self.total_payment]:
            field.setReadOnly(True)

        self.calc_btn = QPushButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
        self.pdf_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF")
        self.theme_btn = QPushButton("üåô")
        self.theme_btn.setFixedSize(30, 30)
        
        self.theme_btn.clicked.connect(self.toggle_theme)
        self.calc_btn.clicked.connect(self.calculate)
        self.pdf_btn.clicked.connect(self.save_to_pdf)

        top_bar = QHBoxLayout()
        top_bar.addStretch()
        top_bar.addWidget(self.theme_btn)

        layout = QGridLayout()
        layout.addLayout(top_bar, 0, 0, 1, 4)

        layout.addWidget(QLabel("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞"), 1, 0)
        layout.addWidget(self.amount_input, 1, 1)
        layout.addWidget(QLabel("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)"), 2, 0)
        layout.addWidget(self.term_input, 2, 1)
        layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)"), 3, 0)
        layout.addWidget(self.rate_input, 3, 1)
        layout.addWidget(QLabel("–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞"), 4, 0)
        layout.addWidget(self.annuity_radio, 4, 1)
        layout.addWidget(self.diff_radio, 5, 1)
        layout.addWidget(self.calc_btn, 6, 0)
        layout.addWidget(self.pdf_btn, 6, 1)
        layout.addWidget(QLabel("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂"), 1, 2)
        layout.addWidget(self.monthly_payment, 1, 3)
        layout.addWidget(QLabel("–û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞"), 2, 2)
        layout.addWidget(self.total_overpay, 2, 3)
        layout.addWidget(QLabel("–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç"), 3, 2)
        layout.addWidget(self.total_payment, 3, 3)

        self.setLayout(layout)

    def calculate(self):
        try:
            principal = float(self.amount_input.text())
            years = float(self.term_input.text())
            rate = float(self.rate_input.text()) / 100
            months = int(years * 12)

            if self.annuity_radio.isChecked():
                monthly_rate = rate / 12
                payment = principal * (monthly_rate * (1 + monthly_rate) ** months) / \
                          ((1 + monthly_rate) ** months - 1)
                total = payment * months
            else:
                payments = []
                for m in range(months):
                    principal_part = principal / months
                    interest_part = (principal - principal * m / months) * rate / 12
                    payments.append(principal_part + interest_part)
                total = sum(payments)
                payment = payments[0]

            overpay = total - principal
            self.monthly_payment.setText(f"{payment:,.2f}".replace(',', ' '))
            self.total_overpay.setText(f"{overpay:,.2f}".replace(',', ' '))
            self.total_payment.setText(f"{total:,.2f}".replace(',', ' '))

        except ValueError:
            self.monthly_payment.setText("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
            self.total_overpay.clear()
            self.total_payment.clear()

    def save_to_pdf(self):
        filename, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF", "", "PDF Files (*.pdf)"
        )
        if not filename:
            return
        if not filename.lower().endswith(".pdf"):
            filename += ".pdf"

        # –ü–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–∞
        font_path = self.find_font()
        if not font_path:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω TTF-—à—Ä–∏—Ñ—Ç –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
            return

        try:
            pdfmetrics.registerFont(TTFont("DejaVuSans", font_path))
            c = canvas.Canvas(filename, pagesize=A4)
            width, height = A4

            c.setFont("DejaVuSans", 16)
            c.drawString(100, height - 50, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ –∏–ø–æ—Ç–µ–∫–∏")

            c.setFont("DejaVuSans", 12)
            y = height - 90
            line_height = 18

            fields = [
                ("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", self.amount_input.text()),
                ("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)", self.term_input.text()),
                ("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)", self.rate_input.text()),
                ("–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞", "–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π" if self.annuity_radio.isChecked() else "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
                ("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂", self.monthly_payment.text()),
                ("–û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞", self.total_overpay.text()),
                ("–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç", self.total_payment.text()),
            ]

            for label, value in fields:
                c.drawString(100, y, f"{label}: {value}")
                y -= line_height

            c.save()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{filename}")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF:\n{e}")

    def find_font(self):
        base = getattr(sys, '_MEIPASS', os.path.dirname(__file__))
        candidates = [
            os.path.join(base, "DejaVuSans.ttf"),
            os.path.join(base, "fonts", "DejaVuSans.ttf"),
            "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
            "C:\\Windows\\Fonts\\arial.ttf",
        ]

        for p in candidates:
            if p and os.path.exists(p):
                return p
        return None

    def toggle_theme(self):
        if self.dark_mode:
            self.apply_light_theme()
        else:
            self.apply_dark_theme()
        self.dark_mode = not self.dark_mode

    def apply_dark_theme(self):
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.ColorRole.Window, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ColorRole.WindowText, Qt.GlobalColor.white)
        dark_palette.setColor(QPalette.ColorRole.Base, QColor(35, 35, 35))
        dark_palette.setColor(QPalette.ColorRole.Text, Qt.GlobalColor.white)
        dark_palette.setColor(QPalette.ColorRole.Button, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ColorRole.ButtonText, Qt.GlobalColor.white)

        self.theme_btn.setText("‚òÄÔ∏è")
        QApplication.instance().setPalette(dark_palette)

    def apply_light_theme(self):
        QApplication.instance().setPalette(QApplication.instance().style().standardPalette())
        self.theme_btn.setText("üåô")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MortgageCalculator()
    window.show()
    sys.exit(app.exec())
